/**
 * Created by alexis on 30/06/15.
 */

(function() {

    /*-- Testimonials slider --*/
    $('#works-slider').flexslider({

        namespace: "works-",     //{NEW} String: Prefix string attached to the class of every element generated by the plugin
        selector: ".work-slides > li",       //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
        animation: "fade",              //String: Select your animation type, "fade" or "slide"
        easing: "swing",                //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
        direction: "vertical",          //String: Select the sliding direction, "horizontal" or "vertical"
        reverse: false,                 //{NEW} Boolean: Reverse the animation direction
        animationLoop: true,            //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
        smoothHeight: true,            //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode
        startAt: 0,                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
        slideshow: true,                //Boolean: Animate slider automatically
        slideshowSpeed: 10000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
        animationSpeed: 600,            //Integer: Set the speed of animations, in milliseconds
        initDelay: 0,                   //{NEW} Integer: Set an initialization delay, in milliseconds
        randomize: false,               //Boolean: Randomize slide order

        // Usability features
        pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
        pauseOnHover: false,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
        useCSS: false,                  //{NEW} Boolean: Slider will use CSS3 transitions if available
        touch: true,                    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
        video: false,                   //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches

        // Primary Controls
        controlNav: true,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
        directionNav: false,             //Boolean: Create navigation for previous/next navigation? (true/false)
        prevText: "&lt;",               //String: Set the text for the "previous" directionNav item
        nextText: "&gt;",               //String: Set the text for the "next" directionNav item

        // Secondary Navigation
        keyboard: true,                 //Boolean: Allow slider navigating via keyboard left/right keys
        multipleKeyboard: false,        //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
        mousewheel: false,              //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
        pausePlay: false,               //Boolean: Create pause/play dynamic element
        pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
        playText: 'Play',               //String: Set the text for the "play" pausePlay item

        // Special properties
        controlsContainer: "#works-controls",  //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be ".flexslider-container". Property is ignored if given element is not found.
        manualControls: "",             //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
        sync: "",                       //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
        asNavFor: "",                   //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider

        // Callback API
        start: function () {
        },            //Callback: function(slider) - Fires when the slider loads the first slide
        before: function () {
        },           //Callback: function(slider) - Fires asynchronously with each slider animation
        after: function () {
        },            //Callback: function(slider) - Fires after each slider animation completes
        end: function () {
        },              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
        added: function () {
        },            //{NEW} Callback: function(slider) - Fires after a slide is added
        removed: function () {
        }           //{NEW} Callback: function(slider) - Fires after a slide is removed
    });


    /*-- Validate Contact form --*/
    var missing_name = 'Quel est votre nom ?'; //error message, if the name field is empty
    var missing_mail = 'L\'adresse email manque !'; //error message, if the mail field is empty
    var invalid_mail = 'Adresse email invalide :('; //error message, if the user's email address is invalid
    var missing_subject = 'Précisez un objet !'; //error message, if the subject field is empty
    var missing_message = 'Pas de message !?'; //error message, if the textarea is empty

    var error_color = '#990000'; //text color of the error messages
    var default_color = '#7E7E7E'; //default text color of the contact form

    $('input#form-name').click(function () {
        var form_name = $('input#form-name').val();

        if (form_name == missing_name) {
            $('input#form-name').css("color", default_color);
            $('input#form-name').val('');
        }

    });

    $('input#form-mail').click(function () {
        var form_mail = $('input#form-mail').val();

        if (form_mail == missing_mail || form_mail == invalid_mail) {
            $('input#form-mail').css("color", default_color);
            $('input#form-mail').val('');
        }

    });

    $('input#form-subject').click(function () {
        var form_subject = $('input#form-subject').val();

        if (form_subject == missing_subject) {
            $('input#form-subject').css("color", default_color);
            $('input#form-subject').val('');
        }

    });

    $('textarea#form-message').click(function () {

        var message_content = $('textarea#form-message').val();

        if (message_content == missing_message || message_content == message_value) {
            $('textarea#form-message').css("color", default_color);
            $('textarea#form-message').val('');
        }
    });

    $('#contact-form button#button').click(function () {

        var name = $('input#form-name').val();
        var email = $('input#form-mail').val();
        var subject = $('input#form-subject').val();
        var comments = $('textarea#form-message').val();

        if (name.trim() == "" || name == missing_name) {
            $('input#form-name').css("color", error_color);
            $('input#form-name').val(missing_name);
        }

        if (email.trim() == "" || email == invalid_mail) {
            $('input#form-mail').css("color", error_color);
            $('input#form-mail').val(missing_mail);
        }

        email = $('input#form-mail').val();

        if (email != missing_mail) {
            var atpos = email.indexOf("@");
            var dotpos = email.lastIndexOf(".");
            if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= email.length) {
                $('input#form-mail').css("color", error_color);
                $('input#form-mail').val(invalid_mail);
            }
        }

        if (subject.trim() == "" || subject == missing_subject) {
            $('input#form-subject').css("color", error_color);
            $('input#form-subject').val(missing_subject);
        }

        if (comments.trim() == "" || comments == missing_message) {
            $('textarea#form-message').css("color", error_color);
            $('textarea#form-message').val(missing_message);
        }

        if (name.trim() == "" || email.trim() == "" || email == invalid_mail || email == missing_mail || comments.trim() == "" || comments == missing_message || subject.trim() == "" || subject == missing_subject) {
            return false;
        }

        var atpos = email.indexOf("@");
        var dotpos = email.lastIndexOf(".");
        if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= email.length) {
            $('input#form-mail').css("color", error_color);
            $('input#form-mail').val(invalid_mail);
            return false;
        }

        $('#contact-form').css('height', $('#contact-form').height() + 'px');

        $("div#contact-form input[type='text']").remove();
        $('div#contact-form textarea').remove();
        $('div#contact-form button').remove();
        $('p#required').remove();
        $('div#result').append('<div id="contact-loading"></div>');

        $.ajax({
            type: 'post',
            url: '/contact',
            data: {
                name: name,
                email: email,
                subject: subject,
                message: comments
            },
            success: function (results) {
                $('div#contact-loading').remove();
                $('#contact-form').html('<div class="contact-confirm"><div class="title">Merci !</div>Votre message a bien été envoyé ! Je vous recontacterai le plus vite possible ;)</div>');
            }
        });

    });

})();